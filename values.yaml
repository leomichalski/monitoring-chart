loki:
  # fix "loki-gateway" naming bug 
  fullnameOverride: "loki"

  write:
    autoscaling:
      enabled: true
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_ACCESS_KEY_ID
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_SECRET_ACCESS_KEY

  read:
    autoscaling:
      enabled: true
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_ACCESS_KEY_ID
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_SECRET_ACCESS_KEY

  backend:
    autoscaling:
      enabled: true
    extraArgs:
      - '-config.expand-env=true'
    extraEnv:
      - name: S3_LOKI_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_ACCESS_KEY_ID
      - name: S3_LOKI_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "loki-s3-credentials"
            key: S3_LOKI_SECRET_ACCESS_KEY

  loki:
    auth_enabled: false

    ingester:
      chunk_encoding: snappy

    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h

    storage_config:
      tsdb_shipper:
        active_index_directory: /var/loki/index # Local directory for active index files
        cache_location: /var/loki/index_cache # Local cache directory for index files
        cache_ttl: 24h # How long cached index files are kept locally
      aws:
        s3: ${S3_LOKI_S3}
        endpoint: ${S3_LOKI_ENDPOINT}
        region: ${S3_LOKI_REGION}
        access_key_id: ${S3_LOKI_ACCESS_KEY_ID}
        secret_access_key: ${S3_LOKI_SECRET_ACCESS_KEY}
        s3forcepathstyle: ${S3_LOKI_S3FORCEPATHSTYLE}
        insecure: ${S3_LOKI_INSECURE}
        bucketnames: loki-chunks

    storage:
      bucketNames:
         chunks: loki-chunks
         ruler: loki-ruler
      type: s3
      s3:
        s3: ${S3_LOKI_S3}
        endpoint: ${S3_LOKI_ENDPOINT}
        region: ${S3_LOKI_REGION}
        access_key_id: ${S3_LOKI_ACCESS_KEY_ID}
        secret_access_key: ${S3_LOKI_SECRET_ACCESS_KEY}
        s3forcepathstyle: ${S3_LOKI_S3FORCEPATHSTYLE}
        insecure: ${S3_LOKI_INSECURE}

    # -- Set the retention period for chunks to 6 months (4320 hours)
    tableManager:
      retention_deletes_enabled: true
      retention_period: 4320h # 6 months

kube-prometheus-stack:
  alertmanager:
    alertmanagerSpec:
      alertmanagerConfigMatcherStrategy:
        type: None

  grafana:
    sidecar:
      alerts:
        enabled: true
      dashboards:
        enabled: true
      datasources:
        enabled: true
      notifiers:
        enabled: true
    # Sets to nil, as kube-prometheus-stack hardcodes it
    adminPassword:
    admin:
      existingSecret: grafana-admin
      userKey: admin-user
      passwordKey: admin-password

externalsecrets:
  enabled: true
  create: true

# TODO: prometheus long-term storage, such as Mimir + S3
